<h2><%= @title %></h2>
<div id='clock'></div>

<a href='#' class='btn btn-default' onclick='reset()'>reset to defaults</a>

<script>
colours = [
  <% Wen::Config.instance.config.colours.each do |name, rgb| %>
    'rgb(<%= rgb.join(', ') %>);',
  <% end %>
]

mode = '<%= Wen::Clock.mode %>'

fields = function() {
  currentTime = new Date()
  second = currentTime.getSeconds()
  minute = currentTime.getMinutes() + second / 60
  hour = currentTime.getHours() + minute / 60

  return data = [
    {
      'unit': 'minutes',
      'numeric': minute
    },
    {
      'unit': 'hours',
      'numeric': hour
    }
  ]
}

pi = Math.PI

width = 320
height = 320
cx = width / 2          // Center x
cy = height / 2          // Center y
margin = 8 / 100
sizestep = width / 7
handSpan = (pi) / 12
stroke = 2

bigRadius = 150
littleRadius = 90
thickness = 40
cornerRadius = 15

scaleMins = d3.scale.linear().domain([0, 59 + 59/60]).range([0, 2 * pi])
scaleHours = d3.scale.linear().domain([0, 11 + 59/60]).range([0, 2 * pi])

vis = d3.select('#clock')
        .append('svg:svg')
        .attr('width', width)
        .attr('height', height)

clockGroup = vis.append('svg:g').attr('transform', 'translate(' + cx + ', ' + cy + ')')

render = function(data) {
  clockGroup.selectAll('hand').remove()
  clockGroup.selectAll('faces').remove()

  mh = {
    radius: bigRadius,
    startAngle: function(number) {
      return scaleMins(number) - handSpan
    },
    endAngle: function(number) {
      return scaleMins(number) + handSpan
    }
  }

  hh = {
    radius: littleRadius,
    startAngle: function(number) {
      return scaleHours(number) - handSpan
    },
    endAngle: function(number) {
      return scaleHours(number) + handSpan
    }
  }

  mf = {
    radius: bigRadius,
    startAngle: function(number) {
      return (pi * 2) + scaleMins(number) - (handSpan + margin)
    },
    endAngle: function(number) {
      return scaleMins(number) + (handSpan + margin)
    }
  }

  hf = {
    radius: littleRadius,
    scale: scaleHours,
    startAngle: function(number) {
      return (pi * 2) + scaleHours(number) - (handSpan + margin)
    },
    endAngle: function(number) {
      return scaleHours(number) + (handSpan + margin)
    }
  }

  hand = {
    'name': 'hand',
    'wheels': {
      'minutes': makeWheel(mh),
      'hours': makeWheel(hh)
    }
  }
  makeGroup(hand)

  faces = {
    'name': 'face',
    'wheels': {
      'minutes': makeWheel(mf),
      'hours': makeWheel(hf)
    }
  }
  makeGroup(faces)
}

//setInterval(function() {
//  var data
  data = fields()
//  return
  render(data)
//}, 10)

refresh()

$(".picker").on('change.spectrum', function (ev, tc) {
  d = ev.target.id.split('-')
  x = {}
  x[d[1]] = [tc['_r'], tc['_g'], tc['_b']]
  y = {}
  y[d[0]] = x

  $.ajax({
    url: '/colours/',
    data: JSON.stringify(y),
    type: 'POST',
    contentType: 'application/json',
    complete: refresh
  })
})

function makeWheel(params) {
  return d3.svg.arc()
           .outerRadius(params['radius'])
           .innerRadius(params['radius'] - thickness)
           .cornerRadius(cornerRadius)
             .startAngle(function(d) {
             return params.startAngle(d.numeric)
           })
           .endAngle(function(d) {
             return params.endAngle(d.numeric)
           })
}

function makeGroup(params) {
  clockGroup.selectAll(params['name'])
            .data(data)
            .enter()
            .append('a').attr("xlink:href", '#')
            .append('svg:path')
            .attr('d', function(d) {
              if (d.unit === 'minutes') {
                return params['wheels']['minutes'](d)
              } else if (d.unit === 'hours') {
                return params['wheels']['hours'](d)
              }
            })
            .attr('class', 'picker')
            .attr('id', function(d) {
              return d.unit + '-' + params['name']
            })
            .attr('opacity', 0.7)
}

function refresh() {
  $('.picker').each(function() {
    var id = this.id
    var s = id.split('-')
    $.getJSON('/colours/' + s[0] + '/' + s[1], function (data) {
      $('#' + id).attr('fill', tinycolor('rgb(' + (data['colour'].join(', '))).toString())
      $('#' + id).attr('stroke', tinycolor('rgb(' + (data['colour'].join(', '))).darken(50).toString())
      $('#' + id).spectrum({
        color: 'rgb(' + (data['colour'].join(', ')) + ')',
        showPalette: true,
        palette: [
          colours
        ],
        showPaletteOnly: true,
        //togglePaletteOnly: true,
        togglePaletteMoreText: 'expert mode',
        togglePaletteLessText: 'easy mode',
        hideAfterPaletteSelect:true,
      //  showInitial: true,
        preferredFormat: "rgb",
        containerClassName: 'wen-picker'
      })
    })
  })
}

function reset() {
  $.ajax({
    url: '/colours/reset',
    type: 'POST',
    contentType: 'application/json',
    complete: refresh
  })
}
</script>
