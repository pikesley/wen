<h2>colours</h2>

<div id='clock'></div>

<script>
var showD3Clock = function() {

  var w = 320             // Width of SVG element
  var h = 320             // Height of SVG element

  var cx = w / 2          // Center x
  var cy = h / 2          // Center y
  var margin = 20
  var r = w / 2 - margin  // Radius of clock face
  var innerRadius = 88
  var outerRadius = 128
  var sw = 20 // stroke width

  var svg = d3.select("#clock").append("svg")
    .attr("width", w)
    .attr("height", h)

  makeClockFace()

  function makeClockFace() {
    svg.append('a').attr("xlink:href", '#')
        .append('svg:circle')
        .attr('id', 'minutes-face')
        .attr('class', 'picker')
        .attr('r', outerRadius)
        .attr('cx', cx)
        .attr('cy', cy)
        .attr('fill', 'none')
        .attr('stroke', '#fff')
        .attr('stroke-width', sw)
        .attr('shape-rendering', 'auto')

    svg.append('a').attr("xlink:href", '#')
        .append('svg:circle')
        .attr('id', 'hours-face')
        .attr('class', 'picker')
        .attr('r', innerRadius)
        .attr('cx', cx)
        .attr('cy', cy)
        .attr('fill', 'none')
        .attr('stroke', '#fff')
        .attr('stroke-width', sw)
        .attr('shape-rendering', 'auto')

    var outerOriginX = cx + ((outerRadius) * Math.sin(0));
    var outerOriginY = cy - ((outerRadius) * Math.cos(0));

    var outerBlob = svg.append('a').attr("xlink:href", '#').append("svg:circle").attr({
      cx: outerOriginX,
      cy: outerOriginY,
      opacity: 1,
      r: 20,
      fill: "#f00"
    });

    var now = new Date()
    var mins = now.getMinutes()

    outerBlob.attr('transform', 'rotate(' + mins * 6 + ', ' + cx + ', ' + cy + ')')
              .attr("xlink:href", '#')
              .attr('id', 'minutes-hands')
              .attr('class', 'picker')

    var innerOriginX = cx + ((innerRadius) * Math.sin(0));
    var innerOriginY = cy - ((innerRadius) * Math.cos(0));

    var innerBlob = svg.append('a').attr("xlink:href", '#').append("svg:circle").attr({
      cx: innerOriginX,
      cy: innerOriginY,
      opacity: 1,
      r: 20,
      fill: "#f00"
    });

    var hours = now.getHours()

    innerBlob.attr('transform', 'rotate(' + hours * 30 + ', ' + cx + ', ' + cy + ')')
              .attr("xlink:href", '#')
              .attr('id', 'hours-hands')
              .attr('class', 'picker')
  }
}

showD3Clock()
refresh()

var colours = [
  <% Wen::Config.instance.config.colours.each do |name, rgb| %>
    'rgb(<%= rgb.join(', ') %>);',
  <% end %>
]

function refresh() {
$('.picker').each(function() {
  var s = this.id.split('-')
  $.getJSON('/colours/' + s[0] + '/' + s[1], function (data) {
    if(s[1] == 'face') {
      $('#' + s[0] + '-' + s[1]).attr('stroke', 'rgb(' + (data['colour'].join(', ')) + ')')
    } else {
      $('#' + s[0] + '-' + s[1]).attr('fill', 'rgb(' + (data['colour'].join(', ')) + ')')
    }
    $('#' + s[0] + '-' + s[1]).spectrum({
      color: 'rgb(' + (data['colour'].join(', ')) + ')',
      showPalette: true,
      palette: [
        colours
      ],
      showPaletteOnly: true,
      togglePaletteOnly: true,
      togglePaletteMoreText: 'more',
      togglePaletteLessText: 'less',
      hideAfterPaletteSelect:true,
      showInitial: true,
      preferredFormat: "rgb"
    })
  })
})
}
$(".picker").on('change.spectrum', function (ev, tc) {
  d = ev.target.id.split('-')
  x = {}
  x[d[1]] = [tc['_r'], tc['_g'], tc['_b']]
  y = {}
  y[d[0]] = x

  $.ajax({
    url: '/colours/',
    data: JSON.stringify(y),
    type: 'PATCH',
    contentType: 'application/json'
  })

  refresh()
})
</script>
