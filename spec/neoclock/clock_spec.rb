module Neoclock
  describe Clock do
    context 'show the time' do
      it 'shows an on-the-hour time' do
        Timecop.freeze DateTime.parse '13:00' do
          expect(Neopixels.instance).to receive(:illuminate).with [
            [255, 0, 0], [255, 0, 0], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [255, 0, 0],

            [0, 0, 255], [255, 0, 0], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255]
          ]
          described_class.time
        end
      end

      it 'shows a half-past-the-hour time' do
        Timecop.freeze DateTime.parse '09:30' do
          expect(Neopixels.instance).to receive(:illuminate).with [
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [255, 0, 0],
            [255, 0, 0], [255, 0, 0], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],

            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [0, 0, 255], [0, 0, 255], [0, 0, 255],
            [255, 0, 0], [0, 0, 255], [0, 0, 255]
          ]
          described_class.time
        end
      end

      context 'edge cases' do
        it 'handles on-the-hour' do
          Timecop.freeze DateTime.parse '09:00' do
            expect(Neopixels.instance).to receive(:illuminate).with [
              [255, 0, 0], [255, 0, 0], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [255, 0, 0],

              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [255, 0, 0], [0, 0, 255], [0, 0, 255]
            ]
            described_class.time
          end
        end

        it 'handles one-minute-to' do
          Timecop.freeze DateTime.parse '20:59' do
            expect(Neopixels.instance).to receive(:illuminate).with [
              [255, 0, 0], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [255, 0, 0], [255, 0, 0],

              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [0, 0, 255],
              [0, 0, 255], [0, 0, 255], [255, 0, 0],
              [0, 0, 255], [0, 0, 255], [0, 0, 255]
            ]
            described_class.time
          end
        end
      end
    end
  end
end
